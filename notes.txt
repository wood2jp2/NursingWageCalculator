Goal of this project:
    - help nurses more accurately calculate the wages they can expect in their bi-weekly check, since unfortunately mistakes are made in the current process. 
        + This can give the nurse a better idea if they need to reach out to get wages corrected.

Technologies: 
    1. Django
    2. React
    3. JSON Web Tokens (JWTs)

https://medium.com/@dakota.lillie/django-react-jwt-authentication-5015ee00ef9a

Crafting the Django backend:
    - Using the pipenv package, we can start up a virtual environment in the directory with 'pipenv shell'
        + This assumes that you have pipenv installed (pipenv install)
    - We installed multiple packages: 'pipenv install django djangorestframework djangorestframework-jwt django-cors-headers'
    - started up wagecalculator project in the backend folder with 'django-admin startproject [project_name] [directory]'
    - Modified the settings.py file by adding two installed apps and one value for cors middleware.
    - Added a cors_origin_whitelist dictionary as well as a REST_FRAMEWORK one.
    - Added an authentication route to urls.py
    - Then we migrated with 'python manage.py migrate'
    - Created user to test authentication: 'python manage.py createsuperuser'
        + 'jwood' || 4esz$ESZ$ESZ
    - Start up server with 'python manage.py runserver'
        + Our back end runs on Port 8000.
        + If you go to http://localhost:8000/admin, you can now log in with those credentials.
    - At http://localhost:8000/token-auth/, you can log in and actually view the token you get back on successful log in.
        + We will also need to set up for users to sign up using Django's built-in User model.
    - So remember, within each django project, it consists of multiple applications.
        + For signing up, we need to create an application because we will need to display a sign up view.
        + 'python manage.py startapp [name_of_app]'
        + Then add the app to the INSTALLED_APPS list in the settings.py file.
    - Now we need to serialize/unserialize the User class into and out of various formats (JSON)
        + We created a serializers.py file in the application with two separate serializers.
        + When the user signs up first time, we create the account and send back the username in the successful response. 
            - We don't need this response when the user does not sign up for the first time, so hence two serializers.

8/28
    - After taking a break, I re-initialized the virtual machine and started it up by first changing to the 'backend' directory, then running 'pipenv shell' to activate the virtual environment.
        + Lastly, run 'python manage.py runserver'
    - We added to the core>views.py file.
        + We will have two views, one for existing users (current_user) and one for new users signing up through the form.
    - We then add a new urls.py file to the core app.
        + Each app has it's own urls.py file for routing configuration
        + Import them, then add urls with views they are to deliver. It appears that class-based views need to be used with the .as_view() method.
            > You don't need to define .as_view() since it should be coming from inheriting from APIView
    - Following, we hook up the core/urls.py file to our project urls.py file.
    
    - Next, we need to allow users to get their data related to their account when they sign in.
        + First we added a utils.py file to our project.
        + Then we imported our UserSerializer into it, and created a custom function to return the data in a dictionary on the 'user' field.
        + This becomes our default with a JWT_AUTH dictionary added to our settings.py file.

    NOTE: In python, you basically access files with dot notation, and any variables, functions, or classes within. 
    NOTE: 'pip freeze' displays the dependencies within your project.

        Random reminder on functional programming in Python:

        arr = [1, 2, 3, 4]

        def cube_numbers(num):
            return num**3

        cube_array = list(map(cube_numbers, arr)) -OR- list(map(lambda num: num**3, arr))

    Tomorrow I will set this up with React.

9/3/2019:
    - used create-react-app to create our frontend portion alongside the backend folder.
    - installed prop-types node package.
        + It looks like this simply specifies the types of props a Component can expect to be passed into it, as well as whether it is required.
    - The Nav component will conditionally render either a logged in version of itself, or a logged out version depending on the props it gets passed.

9/5/2019: 
    - Continuing, we leave the signup form separate in case we'd like to add to the information we collect on a user when they sign up.
        + Django's User model supports email, first_name, last_name fields as well as username and password.
            > We'd need to add any new fields to the serializer as well if we wanted the data back.
    - The loginForm and SignupForm components are stateful, which allows us to track changes in their inputs through the handleChange() methods as users type/change the form.
        + The handleSignup or handleSignin methods are passed down as props accordingly to handle submission.
    - Working on the App.js, note:
        + when the application component mounts, it throws a request to the Python back end, specifically the 'current_user' endpoint.
            > This is a Get request to the current_user view, which includes in the header the web token from local storage (it grabs the token IF it is there, remember).
            > It's passed through the UserSerializer, which returns a User model along with the username associated.
            > It returns that to the React frontend as a response, turns it into JSON, and grabs the username from that json, setting the state to that username.
    - In the SignupForm.js, once submitted, it takes the state (with username and password), and invokes the handleSignup() method being passed down thru props.
        + this is then throwing a request to '/core/users/' (core application, users url endpoint) and passing to it the stringified data (username and password state object) in the body.
            > Then, it's passed to the UserList view: When a request is routed to this view, a UserSerializerWithToken serializer object is instantiated with the data the user entered into the signup form. The serializer checks whether or not the data is valid, and if it is, it’ll save the new user and return that user’s data in the response (including the token, since we’re using this particular serializer).
        + Back in the component, we can take the response, set the JWT in local storage, and set the signed in username to the current user.
    
    - I stumbled upon some conflicts during this. It seems to be that running 'npm install' creates a package.lock.json, which may conflict with something causing an error with the index.html or the favicon.ico.
        + When I used yarn to add and start the app, we're okay.

9/8/2019:
    - I'm on my own now, so I have to figure out a couple problems: 
        + How to prevent a user who is NOT logged in from accessing certain urls.
    - To refamiliarize myself, I am going to add the capability to add first name, last name, and email address to the react form handling sign up.
        1. Added the JSX to the form component.
        2. I'm now trying to 'add' the first_name, last_name and email_address fields to the User model. 
            + In the serializers.py UserSerializerWithToken, I have added these fields to the Meta subclass, but still isn't reflecting that it's even receiving the data in the create method (validated_data). validated_data is only showing the username that was submitted.
            + I've added these fields now to the UserSerializerWithToken class as charFields.
            + Following, I added the fields to the Meta subclass as strings.
            + Now when I try to sign up, the bad request is coming from these three fields being required.
            + Confirmed that all 5 fields are being passed back to the back end and the request is being routed through the create method.
                > I can't figure out how to grab the firstName field that's on the self object.

        SO HERE'S THE WAY TO ADD fields:
        > On the UserSerializerWithToken, add the fields as variables, equal to serializers.charFields() (or whatever data type it will be).
        > Add those fields as strings to the 'fields' variable on the Meta subclass.
            fields = ('token', 'username', 'password', 'first_name', 'last_name', 'email')
        > When they are passed to the back end, ensure that the JSON object contains all those fields named the same as they are in the back end from the state of the react component.

    - On log in, I've changed the functionality to greet the user by their first name, rather than the username.
        > Did this by:
            1. Revising the UserSerializer to include the 'first_name' field.
            2. Adding the 'first_name' field to the state of the App component, and setting it from the json we get back from the Login request and Signup request.